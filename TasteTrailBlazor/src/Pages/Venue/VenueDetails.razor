@page "/Venue/{Id:int?}"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager UriHelper
@inject HttpClient Http
@inject ILocalStorageService localStorageService
@inject IVenueService IVenueService
@inject IMenuService IMenuService
@inject IFeedbackService IFeedbackService

<PageTitle>Venue Details</PageTitle>

@code {
    Map.LoadParameters mapParams;
    int pageNumber = 1;
    int pageSize = 10;

    public class VenueViewModel
    {
        public Venue? Venue { get; set; }
        public MenuDto? Menus { get; set; } = new MenuDto();
        public FeedbackDto? Feedbacks { get; set; } = new FeedbackDto(); 
    }

    private FilterType selectedFilter = FilterType.MostLiked;

    [Parameter]
    public int Id { get; set; }

    private VenueViewModel Model = new VenueViewModel();

    private void GoToDetails(int Id)
    {
        UriHelper.NavigateTo($"/Menu/{Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadVenueData();
        feedback = new FeedbackCreateDto();
    }

    private async Task LoadVenueData()
    {
        try
        {
            Model.Venue = await IVenueService.GetVenueByIdAsync(Id);

            if (Model.Venue != null)
            {
                Model.Menus = await IMenuService.GetFilteredMenusAsync(Id, pageNumber, pageSize);
                Model.Feedbacks = await IFeedbackService.GetFilteredFeedbacksAsync(Id, selectedFilter, pageNumber, pageSize);

                mapParams = new Map.LoadParameters
                {
                    location = new Map.Location
                    {
                        longitude = Model.Venue.Longtitude,
                        latitude = Model.Venue.Latitude
                    },
                    zoom_level = 12
                };
            }
            else
            {
                Console.WriteLine("Venue data is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private FeedbackCreateDto feedback { get; set; }
    private int selectedEmoji = 0;
    private bool isEditMode = false;
 
    private void SelectEmoji(int emojiValue)
    {
        selectedEmoji = emojiValue;
        feedback.Rating = emojiValue;
    } 
 
    private async Task SubmitFeedback()
    {
        if (string.IsNullOrWhiteSpace(feedback.Text))
        {
            Console.WriteLine("Feedback cannot be empty.");
            return;
        }


        if (isEditMode)
        {
            
        feedback.VenueId = Id;
            var response = await IFeedbackService.CreateFeedbackAsync(feedback);
             Console.WriteLine($"Feedback updated: {feedback.Text}, Rating: {feedback.Rating}");
        }
        else
        {
            
            feedback.VenueId = Id;
            var response = await IFeedbackService.CreateFeedbackAsync(feedback);
            Console.WriteLine($"Feedback submitted: {feedback.Text}, Rating: {feedback.Rating}");
        }
 
        ResetForm();
    }
    
     private string GetEmojiClass(int emojiValue)
    {
        return selectedEmoji == emojiValue ? "selected-emoji" : string.Empty;
    }

    private void ResetForm()
    {
        feedback = new FeedbackCreateDto();
        selectedEmoji = 0;
        isEditMode = false;
    }

     private void CancelEdit()
    {
        ResetForm();
    }

     public void EditFeedback(FeedbackCreateDto existingFeedback)
    {
        feedback = existingFeedback;
        selectedEmoji = existingFeedback.Rating;
        isEditMode = true;
    }

}


<div class="container mt-4">
    <div class="row">
        <div class="col-md-4">
             <img src="@Model!.Venue!.LogoUrlPath" class="d-block w-100 " alt="Venue Photo">
        </div>
        <div class="col-md-8">
            <h1 class="mb-3">@Model!.Venue!.Name</h1>
            <!-- Rating -->
            <div class="rating" data-rating="@Model!.Venue.Rating">
                <span class="text-warning">
                    @for (var i = 0; i < (Model!.Venue.Rating); i++)
                    {
                        <i class="fas fa-star star"></i>
                    }
                    @if (Model!.Venue.Rating < 5)
                    {
                        for (var j = (Model!.Venue.Rating); j < 5; j++)
                        {
                            <i class="far fa-star star"></i>
                        }
                    }
                </span>
                <span class="badge bg-secondary ms-2">@Model.Venue.Rating</span>
            </div>
            <!-- Description -->
            <p class="mt-3"><strong>Description: </strong>@Model!.Venue.Description</p>
            <p class="mt-3"><strong>Email: </strong>@Model!.Venue.Email</p>
            <p class="mt-3"><strong>Address: </strong>@Model!.Venue.Address</p>
            <p class="mt-3"><strong>Contact Number: </strong>@Model!.Venue.ContactNumber</p>
            <p class="mt-3"><strong>Average Price: </strong>@Model!.Venue.AveragePrice</p>

        </div>
    </div>
    @* <hr class="mt-5"> *@
    <div class="row mt-5">
        @if (Model.Menus != null && Model.Menus.Entities != null)
        {
            @foreach (var menu in Model!.Menus.Entities)
            {
                <div class="menu">
                    <a style="text-decoration:none; color: inherit;" @onclick="() => GoToDetails(menu.Id)">
                        <div class="menu-head">
                            <h1>@menu.Name</h1>
                            <p class="established">@menu.Description</p>
                        </div>
                        <hr />
                        @* @foreach (var menuItems in menu.MenuItems)
                {
                <section>
                <h2>Header</h2>
                <article class="item">
                <p class="flavor">@menuItems.Name</p>
                <p class="price">150</p>
                </article>
                </section>
                } *@
                    </a>
                </div>
            }
        }
    </div>

    <!-- Location Section -->
    <div class="mt-5">
        <h2>Location</h2>
        <Map height="600px" Parameters="@mapParams"></Map>
    </div>

    <!-- Feedback Section -->
    <!-- <div class="mt-5">
        <h2>Reviews</h2>
        <div class="list-group" style="position: relative;">
            @foreach (var feedback in Model!.Feedbacks!.Entities)
            {
                <div class="list-group-item d-flex align-items-start">
                    <img src="/images/user.png" class="rounded-circle me-3" alt="Alice's logo" style="width: 50px;">
                    <div>
                        <h5 class="mb-1">@feedback.Username</h5>
                        <div class="rating" data-rating="feedback.Rating">
                            <span class="text-warning">
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                            </span>
                            <span class="badge bg-secondary ms-2">@feedback.Rating</span>
                        </div>
                        <p class="mb-1">@feedback.Text
                        </p>
                        <small class="text-muted">Posted on feedback.CreationDate</small>

                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary edit-feedback">Edit <i
                                    class="fas fa-pencil-alt"></i></button>
                        </div>

                    </div>
                </div>
            }
            <button type="button" class="btn btn-primary btn-lg rounded-circle" id="addFeedbackBtn"
                style="position: absolute; bottom: -10px; right: -15px;"><i class="fas fa-plus"></i> </button>
        </div>

    </div> -->

    <div class="mt-5" id="commentFormSection"> 
        <EditForm class="feedback-card" Model="feedback" OnValidSubmit="SubmitFeedback">
            <h2>How are you feeling today?</h2>
            <p>Your input is valuable in helping us better understand your needs and tailor our service accordingly.</p>

            <div class="emojis"> 
                <span @onclick="() => SelectEmoji(1)" class="emoji @GetEmojiClass(1)">😢</span>
                <span @onclick="() => SelectEmoji(2)" class="emoji @GetEmojiClass(2)">😞</span>
                <span @onclick="() => SelectEmoji(3)" class="emoji @GetEmojiClass(3)">😐</span>
                <span @onclick="() => SelectEmoji(4)" class="emoji @GetEmojiClass(4)">🙂</span>
                <span @onclick="() => SelectEmoji(5)" class="emoji @GetEmojiClass(5)">🥰</span>
    
            </div>

            <InputTextArea class="comment-box" placeholder="Add or edit comment..." @bind-Value="feedback.Text" />


            <button type="submit" class="submit-btn">
            @if (isEditMode)
            {
                <span>Update Feedback</span>
            }
            else
            {
                <span>Submit Now</span>
            }
            </button>

            @if (isEditMode)
            {
                <button type="button" class="cancel-btn" @onclick="CancelEdit">Cancel</button>
            }
        </EditForm> 
        <div class="feedbacks-card">
        <h2>Reviews</h2>
        <div class="list-group" style="position: relative;">
        @if(Model!.Feedbacks!.Entities.Count() == 0)
        {
            <div class="no-cards">
            <p>No Feedbacks available at the moment. <span class="emoji">😞</span></p>
        </div>
        }
        else{
            @foreach (var feedback in Model!.Feedbacks!.Entities)
            {
                <div class="list-group-item d-flex align-items-start">
                    <img src="/images/user.png" class="rounded-circle me-3" alt="Alice's logo" style="width: 50px;">
                    <div>
                        <h5 class="mb-1">@feedback.Username</h5>
                        <div class="rating" data-rating="feedback.Rating">
                            <span class="text-warning">
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                            </span>
                            <span class="badge bg-secondary ms-2">@feedback.Rating</span>
                        </div>
                        <p class="mb-1">@feedback.Text</p>
                        <small class="text-muted">Posted on feedback.CreationDate</small>
                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary edit-feedback">
                                Edit <i class="fas fa-pencil-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
            <button type="button" class="btn btn-primary btn-lg rounded-circle" id="addFeedbackBtn" style="position: absolute; bottom: -10px; right: -15px;">
                <i class="fas fa-plus"></i>
            </button>
        }
        </div>
        </div>
    </div>  
</div>

<style>
    #map {
        height: 100vh;
    }

    .leaflet-popup-content-wrapper {
        width: 100%;
    }
</style>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
 

<style>
    img {
    max-width: 100%;
    height: auto;
}
    .container {
        margin-bottom: 250px;
    }


    .menu-head h1 {
        font-size: 34px;
        margin-top: 0;
        margin-bottom: 15px;
    }

    .menu h2 {
        font-size: 26px;
    }

    .menu .established {
        font-style: italic;
    }

    .menu h1,
    .menu h2,
    .menu p {
        text-align: center;
    }

    .menu {
        background-color: burlywood;
        margin-left: 1rem;
        margin-right: 1rem;
        padding: 20px 10px 30px 10px;
        max-width: 470px;
        border-radius: 2%;
    }

    .menu hr {
        height: 2px;
        background-color: brown;
        border-color: brown;
    }

    .menu h1,
    .menu h2 {
        font-family: Impact, serif;
    }

    .menu .item p {
        display: inline-block;
        margin-top: 5px;
        margin-bottom: 5px;
        font-size: 18px;
    }

    .menu .flavor,
    .menu .dessert {
        text-align: left;
        width: 75%;
    }

    .menu .price {
        text-align: right;
        width: 24%;
    }
    .no-cards {
        text-align: center;
        margin-top: 20px;
    }

    .no-cards p {
        font-size: 18px;
        color: #888;
    }
    #commentFormSection {
    display: flex;
    gap: 20px;  
}

.feedback-card, .feedbacks-card {
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    padding: 25px;
    text-align: center;
    margin: 10px;
    flex: 1;  
}

.feedback-card {
    flex: 1;  
    height: 450px;  

}

.feedbacks-card {
    flex: 2; 
 }

.feedback-card h2 {
    margin-block-end: 15px;
    color: #333333;
}

.feedback-card p {
    color: #585758;
    font-size: 15px;
    margin-block-end: 30px;
}

.emojis {
    transition: transform 0.6s, color 0.6s;
    display: flex;
    justify-content: space-between;
    margin-block-end: 20px;
}

.emoji {
    cursor: pointer;
    font-size: 30px;
    transition: transform 0.6s, color 0.6s, filter 0.6s;
    color: #cccccc;
}

.emoji:hover {
    transform: scale(1.3);
    filter: grayscale(0);
    color: inherit;
}

.emoji.selected {
    transform: scale(1.3);
    color: #03070a;
}

.comment-box {
    inline-size: calc(100% - 20px);
    padding: 10px;
    border: 1px solid #dddddd;
    border-radius: 8px;
    margin-block-end: 20px;
    resize: none;
    font-size: 14px;
    font-family: inherit;
    outline: none;
}

.submit-btn {
    background: linear-gradient(45deg, #4caf50, #388e3c);
    color: white;
    padding: 12px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    inline-size: 100%;
    font-size: 18px;
    transition: background-color 1s;
}

.submit-btn:hover {
    background: linear-gradient(-63deg, #03f00f, #2e7d32);
}

.selected {
    color: #ffcc00;
}


</style>