@page "/DashboardUsers"
@attribute [Authorize]
@layout DashBoardLayout
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService localStorageService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider

@code {
    private List<UserDto> usersDto = new List<UserDto>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
            }
            var token = await localStorageService.GetItemAsStringAsync("jwt");

            var httpClient = HttpClientFactory.CreateClient("BlazorPolicy");

            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.GetAsync("/api/AdminPanel/User?from=0&to=10");

            if (response.IsSuccessStatusCode)
            {
                usersDto = await response.Content.ReadFromJsonAsync<List<UserDto>>();
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ToggleMute(string userId)
    {
        try
        {
            var token = await localStorageService.GetItemAsStringAsync("jwt");
            var httpClient = HttpClientFactory.CreateClient("BlazorPolicy");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.PostAsync($"/api/AdminPanel/ToggleMute/{userId}", null);

            if (response.IsSuccessStatusCode)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    updatedUser.User.IsMuted = !updatedUser.User.IsMuted;
                    updatedUser.User.IsBanned = false;
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling mute: {ex.Message}");
        }
    }

    private async Task ToggleBan(string userId)
    {
        try
        {
            var token = await localStorageService.GetItemAsStringAsync("jwt");
            var httpClient = HttpClientFactory.CreateClient("BlazorPolicy");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.PostAsync($"/api/AdminPanel/ToggleBan/{userId}", null);

            if (response.IsSuccessStatusCode)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    updatedUser.User.IsBanned = !updatedUser.User.IsBanned;
                    updatedUser.User.IsMuted = false;
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling ban: {ex.Message}");
        }
    }

    private async Task AssignRole(string userId)
    {
        try
        {
            var token = await localStorageService.GetItemAsStringAsync("jwt");
            var httpClient = HttpClientFactory.CreateClient("BlazorPolicy");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.PostAsync($"/api/AdminPanel/AssignRole?userId={userId}&roleId={(int)UserRoles.Admin}",
            null);

            if (response.IsSuccessStatusCode)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    if (!updatedUser.Roles.Contains(UserRoles.Admin.ToString()))
                    {
                        updatedUser.Roles.Add(UserRoles.Admin.ToString());
                    }
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning role: {ex.Message}");
        }
    }

    private async Task RemoveRole(string userId)
    {
        try
        {
            var token = await localStorageService.GetItemAsStringAsync("jwt");
            var httpClient = HttpClientFactory.CreateClient("BlazorPolicy");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.PostAsync($"/api/AdminPanel/RemoveRole?userId={userId}&roleId={(int)UserRoles.Admin}",
            null);

            if (response.IsSuccessStatusCode)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    if (updatedUser.Roles.Contains(UserRoles.Admin.ToString()))
                    {
                        updatedUser.Roles.Remove(UserRoles.Admin.ToString());
                    }
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing role: {ex.Message}");
        }
    }

}

<div class="content-wrapper">
    <div class="row">
        <div class="col-lg-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Profile</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Roles</th>
                                    <th>Status</th>
                                    <th>Role Actions</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in usersDto)
                                {
                                    <tr>
                                        <td>
                                            @if (string.IsNullOrEmpty(user.User.AvatarPath))
                                            {
                                                <img src="../images/user.png" alt="User Avatar" class="rounded-circle"
                                                    width="50" height="50" />
                                            }
                                            else
                                            {
                                                <img src="@user.User.AvatarPath" alt="User Avatar" class="rounded-circle"
                                                    width="50" height="50" />
                                            }
                                        </td>
                                        <td>@user.User.UserName</td>
                                        <td>@user.User.Email</td>
                                        <td>@string.Join(", ", user.Roles)</td>
                                        <td>
                                            <label
                                                class="badge @(user.User.IsBanned ? "badge-danger" : user.User.IsMuted ? "badge-warning" : "badge-success")">
                                                @(user.User.IsBanned ? "Banned" : user.User.IsMuted ? "Muted" : "Active")
                                            </label>
                                        </td>
                                        <td>
                                            <button @onclick="() => AssignRole(user.User.Id)" class="btn btn-info btn-sm">
                                                Assign Admin
                                            </button>
                                            <button @onclick="() => RemoveRole(user.User.Id)"
                                                class="btn btn-secondary btn-sm">
                                                Remove Admin
                                            </button>
                                        </td>
                                        <td>
                                            <button @onclick="() => ToggleMute(user.User.Id)"
                                                class="btn btn-warning btn-sm">
                                                @(user.User.IsMuted ? "Unmute" : "Mute")
                                            </button>
                                            <button @onclick="() => ToggleBan(user.User.Id)" class="btn btn-danger btn-sm">
                                                @(user.User.IsBanned ? "Unban" : "Ban")
                                            </button>

                                        </td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
