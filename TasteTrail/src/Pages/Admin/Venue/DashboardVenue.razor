@page "/DashboardVenues"
@attribute [Authorize(Policy = "AdminOnly")]
@layout DashBoardLayout
@inject IJSRuntime JS
@inject ILocalStorageService localStorageService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IVenueService IVenueService

@code {
    
    private int currentPage = 1;
    private int totalPages = 0;
    private int itemsPerPage = 9;
    private VenueDto? venueDto { get; set; }
    private string searchQuery = string.Empty;
    private FilterType selectedFilter = FilterType.OldestFirst;
    private bool isLoading = true;

    public static string SplitCamelCase(string input)
{
    return System.Text.RegularExpressions.Regex.Replace(input, "(\\B[A-Z])", " $1");
}

    protected override async Task OnInitializedAsync()
    {
        await LoadVenues();
    }

    private async Task LoadVenues()
    {
        isLoading = true;
        if (authenticationStateProvider is JwtAuthenticationStateProvider jwtProvider)
        {
            var authState = await jwtProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var isAuthenticated = user!.Identity!.IsAuthenticated && user!.IsInRole("Admin");

            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            isLoading = true;
            try
            {
                venueDto = await IVenueService.GetFilteredVenuesAsync(selectedFilter, currentPage, itemsPerPage, searchQuery);
                if (venueDto != null)
                {
                    totalPages = venueDto.AmountOfPages;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading venues: {ex.Message}");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task Refresh()
    {
        await LoadVenues();
    }

    private async Task FilterVenues()
    {
        currentPage = 1;
        await Refresh();
    }

    private void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/Venue/{id}");
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages)
            return;

        currentPage = pageNumber;
        await LoadVenues();
    }

    private async Task GoToPreviousPage()
    {
        if (currentPage > 1)
            await GoToPage(currentPage - 1);
    }

    private async Task GoToNextPage()
    {
        if (currentPage < totalPages)
            await GoToPage(currentPage + 1);
    }

    private IEnumerable<int> GetPageNumbers()
    {
        int startPage = ((currentPage - 1) / 10) * 10 + 1;
        int endPage = Math.Min(startPage + 9, totalPages);

        for (int i = startPage; i <= endPage; i++)
        {
            yield return i;
        }
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        if (Enum.TryParse(e!.Value!.ToString(), out FilterType filter))
        {
            selectedFilter = filter;
            Console.WriteLine($"Error loading venues: {(int)filter}");

            await FilterVenues();
        }
    }

     private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Refresh();
        }
    }

    private void CreateVenue()
    { 
        NavigationManager.NavigateTo("/Venue/Create", true); 
    }
    private void UpdateVenue(int id)
    {   
        NavigationManager.NavigateTo($"/Venue/Update/{id}", true); 
    } 
    private async Task DeleteVenue(int id)
    {
    try
    {
        await IVenueService.DeleteVenueByIdAsync(id);
        await Refresh();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error deleting venue: {ex.Message}");
    }
    }

}

    <div class="content-wrapper">
        <div class="row mb-3">
            <div class="searchcontainer">
                <select @onchange="HandleChange">
                    @foreach (var filter in Enum.GetValues(typeof(FilterType)).Cast<FilterType>())
                    {
                        if( filter != FilterType.MostLiked && filter != FilterType.Muted && filter != FilterType.NotMuted && filter != FilterType.Banned && filter != FilterType.NotBanned )
                        {
                        <option value="@filter">@SplitCamelCase(filter.ToString())</option>
                        }
                    }
                </select>
                <input type="text" @bind="searchQuery" class="form-control" placeholder="Search for venues..."
                    autocomplete="off" autofocus @onkeypress="HandleKeyPress">
                    <button @onclick="Refresh"><i class="fa-solid fa-magnifying-glass"></i></button>
            </div>
        </div>
@if (isLoading)
{
    <div class="content-wrapper center fade-in">
        <svg class="pl" viewBox="0 0 128 128" width="128px" height="128px" role="img"
            aria-label="A pan being used to flip a blob resembling bacon as it splashes drops of grease in and out">
            <clipPath id="pan-clip">
                <rect rx="12" ry="14" x="4" y="52" width="68" height="28" />
            </clipPath>
            <defs>
                <linearGradient id="pl-grad" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stop-color="#000" />
                    <stop offset="100%" stop-color="#fff" />
                </linearGradient>
                <mask id="pl-mask">
                    <rect x="0" y="0" width="88" height="80" fill="url(#pl-grad)" />
                </mask>
            </defs>
            <g fill="currentColor">
                <g fill="none" stroke-dasharray="20 221" stroke-dashoffset="20" stroke-linecap="round" stroke-width="4">
                    <g stroke="hsl(38,90%,50%)">
                        <circle class="pl__ring" cx="44" cy="40" r="35" transform="rotate(90,44,40)" />
                    </g>
                    <g stroke="hsl(8,90%,40%)" mask="url(#pl-mask)">
                        <circle class="pl__ring" cx="44" cy="40" r="35" transform="rotate(90,44,40)" />
                    </g>
                </g>
                <g fill="hsla(223,10%,70%,0)">
                    <g class="pl__drop pl__drop--1">
                        <circle class="pl__drop-inner" cx="13" cy="60" r="2" />
                    </g>
                    <g class="pl__drop pl__drop--2">
                        <circle class="pl__drop-inner" cx="13" cy="60" r="2" />
                    </g>
                    <g class="pl__drop pl__drop--3">
                        <circle class="pl__drop-inner" cx="67" cy="72" r="2" />
                    </g>
                    <g class="pl__drop pl__drop--4">
                        <circle class="pl__drop-inner" cx="67" cy="72" r="2" />
                    </g>
                    <g class="pl__drop pl__drop--5">
                        <circle class="pl__drop-inner" cx="67" cy="72" r="2" />
                    </g>
                </g>
                <g class="pl__pan">
                    <rect rx="2" ry="2" x="4" y="66" width="68" height="14" clip-path="url(#pan-clip)" id="pan" />
                    <rect rx="2" ry="2" x="76" y="66" width="48" height="7" />
                </g>
                <rect class="pl__shadow" fill="hsla(223,10%,50%,0.2)" rx="3.5" ry="3.5" x="10" y="121" width="60"
                    height="7" />
            </g>
        </svg>
    </div>
}
else
{
        <div class="row">
            <div class="col-lg-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>  
                                            <button @onclick="() => CreateVenue()" data-bs-toggle="tooltip" data-bs-placement="top" title="Create new Venue">
                                                <i class="fa-solid fa-plus"></i>
                                            </button>
                                            <button  @onclick="() => Refresh()">
                                                <i class="fa-solid fa-arrows-rotate"></i>
                                            </button>
                                        </th>
                                        <th>Logo</th>
                                        <th>Name</th>
                                        <th>Address</th>
                                        <th>Description</th>
                                        <th>ContactNumber</th>
                                        <th>Email</th>
                                        <th>Average Price</th>
                                        <th>Rating</th>
                                        <th>User Id</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var venue in venueDto!.Entities!)
                                    {
 
                                        <tr>
                                            <td>
                                            <button @onclick="() => CreateVenue()" data-bs-toggle="tooltip" data-bs-placement="Bottom" title="Create new Venue">
                                                    <i class="fa-regular fa-square-plus"></i>
                                                </button>
                                                <button class="ml-4" @onclick="() => UpdateVenue(venue.Id)" > 
                                                    <i class="fa-solid fa-pen-to-square"></i>
                                                </button>
                                            </td>
                                            <td @onclick="() => GoToDetails(venue.Id)">
                                                <img src="@venue!.LogoUrlPath" alt="Venue Avatar" class="rounded-circle"
                                                    width="50" height="50" />
                                            </td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.Name</td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.Address</td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.Description</td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.ContactNumber</td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.Email</td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.AveragePrice</td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.Rating</td>
                                            <td @onclick="() => GoToDetails(venue.Id)">@venue!.UserId</td>
                                            <td><button @onclick="() => DeleteVenue(venue.Id)" class="btn btn-github btn-sm"> Delete</button></td>
                                        </tr> 
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="container">
                <button class="prevBtn" @onclick="GoToPreviousPage" disabled="@(!isLoading && currentPage == 1)">
                    <span class="prevBtn-icon"><i class="fa-solid fa-angle-left m-1"
                            style='@(currentPage == 1 ? "color: #C7C5C5" : "#2a3b52 ")'></i></span>
                    <span class="prevBtn-text" style='@(currentPage == 1 ? "color: #C7C5C5" : "#2a3b52 ")'>Prev</span>
                </button>
                <div class="containerBtns">
                    @foreach (var i in GetPageNumbers())
                    {
                        <button class="@(i == currentPage ? "activeBtn" : "")" @onclick="() => GoToPage(i)">@i</button>
                    }
                </div>
                <button class="nextBtn " @onclick="GoToNextPage" disabled="@((!isLoading && currentPage == totalPages) || totalPages == 0)">
                    <span class="nextBtn-text" style='@((!isLoading && currentPage == totalPages) || totalPages == 0 ? "color: #C7C5C5" : "#2a3b52 ")'>Next</span>
                    <span class="nextBtn-icon"><i class="fa-solid fa-angle-right m-1"
                            style='@((!isLoading && currentPage == totalPages) || totalPages == 0 ? "color: #C7C5C5" : "#2a3b52 ")'></i></span>
                </button>
            </div>
            <div class="paginate-details">
                <span>-</span>
                <span class="count">@venueDto.AmountOfEntities</span>
                <span>-</span>
            </div>
        </div>
}
    </div>

<style> 
    th button{
        margin: 10px;
    }
    th button:hover {
        transition: opacity 0.5s ease-out;
        opacity: 70%;
    }  
    .hidden {
        display: none;
    }

    .fade-out {
        opacity: 0;
        transition: opacity 0.5s ease-out;
    }

    .fade-in {
        opacity: 1;
        transition: opacity 0.5s ease-in;
    }

    :root {
        --hue: 223;
        --bg: #e8e3e3;
        --fg: #1c1717;
        --trans-dur: 0.3s;
    }

    .center {
        width: 1500px;
        height: 800px;
        display: flex;
        justify-content: center;
        justify-items: center;
        align-items: center;
        align-content: center;
    }

    .pl {
        margin: auto;
        width: 12em;
        height: 12em;
    }

    .pl__drop,
    .pl__drop-inner,
    .pl__pan,
    .pl__ring,
    .pl__shadow {
        animation: pan 2s cubic-bezier(0.65, 0, 0.35, 1) infinite;
    }

    .pl__drop {
        transform-origin: 13px 60px;
    }

    .pl__drop-inner {
        animation-timing-function: cubic-bezier(0.33, 0.84, 0.67, 0.84);
    }

    .pl__drop--1 {
        animation-name: drop-1;
    }

    .pl__drop--1 .pl__drop-inner {
        animation-name: drop- 1-inner;
    }

    .pl__drop--2 {
        animation-name: drop-2;
    }

    .pl__drop--2 .pl__drop-inner {
        animation-name: drop- 2-inner;
    }

    .pl__drop--3 {
        animation-name: drop-3;
        transform-origin: 67px 72px;
    }

    .pl__drop--3 .pl__drop-inner {
        animation-name: drop- 3-inner;
    }

    .pl__drop--4 {
        animation-name: drop-4;
        transform-origin: 67px 72px;
    }

    .pl__drop--4 .pl__drop-inner {
        animation-name: drop- 4-inner;
    }

    .pl__drop--5 {
        animation-name: drop-5;
        transform-origin: 67px 72px;
    }

    .pl__drop--5 .pl__drop-inner {
        animation-name: drop- 5-inner;
    }

    .pl__pan {
        transform-origin: 36px 74px;
    }

    .pl__ring {
        animation-name: flip-ring;
    }

    .pl__shadow {
        animation-name: pan-shadow;
        transform-origin: 36px 124.5px;
    }

    @@media (prefers-color-scheme: dark) {
        :root {
            --bg: #1c1717;
            --fg: #e8e3e3;
        }
    }

    @@keyframes drop-1 {
        from {
            animation-timing-function: steps(1, end);
            transform: translate(0, 0);
            visibility: hidden;
        }

        30% {
            animation-timing-function: linear;
            transform: translate(0, 0);
            visibility: visible;
        }

        50%,
        to {
            transform: translate(-6px, 0);
        }
    }

    @@keyframes drop-1-inner {

        from,
        30% {
            fill: #abafba;
            transform: translate(0, 0);
        }

        50%,
        to {
            fill: #abafba;
            transform: translate(0, -27px);
        }
    }

    @@keyframes drop-2 {
        from {
            animation-timing-function: steps(1, end);
            transform: translate(0, 0);
            visibility: hidden;
        }

        30% {
            animation-timing-function: linear;
            transform: translate(0, 0);
            visibility: visible;
        }

        50%,
        to {
            transform: translate(-8px, 0);
        }
    }

    @@keyframes drop-2-inner {

        from,
        30% {
            fill: #abafba;
            transform: translate(0, 0);
        }

        50%,
        to {
            fill: #abafba;
            transform: translate(0, -9px);
        }
    }

    @@keyframes drop-3 {
        from {
            animation-timing-function: steps(1, end);
            transform: translate(0, 0);
            visibility: hidden;
        }

        78% {
            animation-timing-function: linear;
            transform: translate(0, 0);
            visibility: visible;
        }

        98%,
        to {
            transform: translate(-24px, 0);
        }
    }

    @@keyframes drop-3-inner {

        from,
        78% {
            fill: #abafba;
            transform: translate(0, 0);
        }

        98%,
        to {
            fill: #abafba;
            transform: translate(0, -28px);
        }
    }

    @@keyframes drop-4 {
        from {
            animation-timing-function: steps(1, end);
            transform: translate(0, 0);
            visibility: hidden;
        }

        78% {
            animation-timing-function: linear;
            transform: translate(0, 0);
            visibility: visible;
        }

        98%,
        to {
            transform: translate(-8px, 0);
        }
    }

    @@keyframes drop-4-inner {

        from,
        78% {
            fill: #abafba;
            transform: translate(0, 0);
        }

        98%,
        to {
            fill: #abafba;
            transform: translate(0, -36px);
        }
    }

    @@keyframes drop-5 {
        from {
            animation-timing-function: steps(1, end);
            transform: translate(0, 0);
            visibility: hidden;
        }

        78% {
            animation-timing-function: linear;
            transform: translate(0, 0);
            visibility: visible;
        }

        98%,
        to {
            transform: translate(8px, 0);
        }
    }

    @@keyframes drop-5-inner {

        from,
        78% {
            fill: #abafba;
            transform: translate(0, 0);
        }

        98%,
        to {
            fill: #abafba;
            transform: translate(0, -32px);
        }
    }

    @@keyframes flip-ring {

        from,
        27% {
            animation-timing-function: cubic-bezier(0.33, 0.84, 0.67, 0.84);
            stroke-dashoffset: 20;
            stroke-width: 4px;
        }

        53.5% {
            animation-timing-function: cubic-bezier(0.33, 0.16, 0.67, 0.16);
            stroke-dashoffset: -100;
            stroke-width: 10px;
        }

        80%,
        to {
            stroke-dashoffset: -220;
            stroke-width: 4px;
        }
    }

    @@keyframes pan {

        from,
        88%,
        to {
            transform: translate(0, 0) rotate(0);
        }

        20% {
            animation-timing-function: cubic-bezier(0.33, 0.16, 0.67, 0.16);
            transform: translate(-5px, 0) rotate(-30deg);
        }

        30% {
            animation-timing-function: cubic-bezier(0.33, 0.84, 0.67, 0.84);
            transform: translate(0, 0) rotate(20deg);
        }

        60%,
        78% {
            animation-timing-function: linear;
            transform: translate(0, 0) rotate(0);
        }

        81.33% {
            animation-timing-function: linear;
            transform: translate(0, 4px) rotate(0);
        }

        84.67% {
            animation-timing-function: linear;
            transform: translate(0, -2px) rotate(0);
        }
    }

    @@keyframes pan-shadow {

        from,
        88%,
        to {
            fill: rgba(115, 122, 140, 0.2);
            transform: scaleX(1);
        }

        20% {
            animation-timing-function: cubic-bezier(0.33, 0.16, 0.67, 0.16);
            fill: rgba(115, 122, 140, 0.2);
            transform: scaleX(0.77);
        }

        30% {
            animation-timing-function: cubic-bezier(0.33, 0.84, 0.67, 0.84);
            fill: rgba(115, 122, 140, 0.2);
            transform: scaleX(1);
        }

        60%,
        78% {
            animation-timing-function: linear;
            fill: rgba(115, 122, 140, 0.2);
            transform: scaleX(1);
        }

        81.33% {
            animation-timing-function: linear;
            fill: rgba(115, 122, 140, 0.25);
            transform: scaleX(0.87);
        }

        84.67% {
            animation-timing-function: linear;
            fill: rgba(115, 122, 140, 0.225);
            transform: scaleX(1.065);
        }
    }
</style>
<style>
    *{
        font-weight: 600;
    }

    
    tr>td:first-child {
        width: 1px;
    }

    .container {
        padding: 8px 64px;
        display: flex;
        justify-content: space-between;
        background-color: #ffffff;
        border-radius: 64px;
    }

    .paginate-details {
        margin-top: 16px;
        font-weight: 500;
        text-align: center;
    }

    button {
        background-color: transparent;
        border: none;
    }

    .nextBtn {
        margin-left: 32px;
        margin-right: 32px;
    }

    .prevBtn,
    .nextBtn {
        cursor: pointer;
        display: flex;
        align-items: center;
        font-size: 16px;
        font-weight: 500;
        color: #2a3b52
    }

    .count {
        color: #7a7070;
    }

    .nextBtn-icon,
    .prevBtn-icon {
        display: flex;
    }

    .prevBtn svg {
        margin-right: 6px;
    }

    .nextBtn svg {
        margin-left: 6px;
    }
 

    button[disabled].prevBtn,
    button[disabled].nextBtn {
        cursor: not-allowed;
        color: rgb(156 163 175 / var(--tw-text-opacity));
    }

    .containerBtns {
        width: 50%;
        display: flex;
        justify-content: space-around;
    }

    .leftContainer {
        display: flex;
        width: 190px;
        justify-content: end;
    }

    .rightContainer {
        display: flex;
        width: 190px;
        justify-content: start;
    }

    .activeBtn {
        margin: 0 12px;
        padding: 4px 6px;
        min-width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #5046e5;
        font-size: 20px;
        color: #fff;
        border-radius: 50%;
        border: 4px solid #c9c6ff
    }

    .numberBtn {
        cursor: pointer;
        margin: 0 4px;
        min-width: 40px;
        padding: 4px;
        font-size: 18px;
    }

    .numberBtn[disabled] {
        cursor: not-allowed
    }

    .searchcontainer {
        margin: auto;
        padding: 10px 20px;
        margin: auto;
        border: 1px solid rgb(255, 255, 255);
        background: white;
        border-radius: 64px;
        display: flex;
        justify-content: space-between;
    }


    .searchcontainer select {
        border: none;
        outline: none;
        width: 10%;
        cursor: pointer;
        background: transparent;
    }

    .searchcontainer input {
        width: 75%;
        border: none;
        outline: none;
        margin-left: 10px;
    }

    .searchcontainer button {
        border: none;
        outline: none;
        font-size: 25px;
        margin: auto;
        margin-right: 0;
        color: rgb(139, 139, 139);
        background: white;
    }
</style>

<script>
     document.addEventListener('DOMContentLoaded', function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>