@page "/DashboardUsers"
@attribute [Authorize(Policy = "AdminOnly")]
@layout DashBoardLayout
@inject IJSRuntime JS
@inject ILocalStorageService localStorageService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IAdminPanelService IAdminPanelService

@code {
    private List<UserDto> usersDto = new List<UserDto>();
    private int from = 0;
    private int to = 10;
    private int currentPage = 1;
    private int totalPages = 10;
    private int itemsPerPage = 2;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        if (authenticationStateProvider is JwtAuthenticationStateProvider jwtProvider)
        {
            var authState = await jwtProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var isAuthenticated = user.Identity.IsAuthenticated && user.IsInRole("Admin");

            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            try
            {
                from = (currentPage - 1) * itemsPerPage;
                to = from + itemsPerPage;

                string currentAdminId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                usersDto = await IAdminPanelService.GetAllUsersAsync(from, to);
                if (!string.IsNullOrEmpty(currentAdminId))
                {
                    usersDto = usersDto.Where(u => u.User.Id != currentAdminId).ToList();
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading user data: {ex.Message}");
            }
            finally
            {
                isLoading = false;
            }
        }
    }
    private async Task ToggleMute(string userId)
    {
        try
        {
            var success = await IAdminPanelService.ToggleMuteAsync(userId);
            if (success)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    updatedUser.User.IsMuted = !updatedUser.User.IsMuted;
                }
            }
            else
            {
                Console.WriteLine("Error toggling mute.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling mute: {ex.Message}");
        }
    }

    private async Task ToggleBan(string userId)
    {
        try
        {
            var success = await IAdminPanelService.ToggleBanAsync(userId);
            if (success)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    updatedUser.User.IsBanned = !updatedUser.User.IsBanned;
                }
            }
            else
            {
                Console.WriteLine("Error toggling ban.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling ban: {ex.Message}");
        }
    }

    private async Task AssignRole(string userId)
    {
        try
        {
            var success = await IAdminPanelService.AssignRoleAsync(userId, UserRoles.Admin);
            if (success)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    updatedUser.Roles.Add(UserRoles.Admin.ToString());
                    updatedUser.Roles.Remove(UserRoles.User.ToString());
                }
            }
            else
            {
                Console.WriteLine("Error assigning role.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning role: {ex.Message}");
        }
    }

    private async Task RemoveRole(string userId)
    {
        try
        {
            var success = await IAdminPanelService.RemoveRoleAsync(userId, UserRoles.Admin);
            if (success)
            {
                var updatedUser = usersDto.FirstOrDefault(u => u.User.Id == userId);
                if (updatedUser != null)
                {
                    updatedUser.Roles.Remove(UserRoles.Admin.ToString());
                    updatedUser.Roles.Add(UserRoles.User.ToString());
                }
            }
            else
            {
                Console.WriteLine("Error removing role.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing role: {ex.Message}");
        }
    }

    private void GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages)
            return;

        currentPage = pageNumber;
        LoadUsers().GetAwaiter().GetResult();
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
            GoToPage(currentPage - 1);
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
            GoToPage(currentPage + 1);
    }

    private IEnumerable<int> GetPageNumbers()
    {
        int startPage = ((currentPage - 1) / 10) * 10 + 1;
        int endPage = Math.Min(startPage + 9, totalPages);

        for (int i = startPage; i <= endPage; i++)
        {
            yield return i;
        }
    }
}
@if (isLoading)
{
    <div class="loading-spinner">
        <p>Loading users...</p>
    </div>
}
else
{
    <div class="content-wrapper">
        <div class="row mb-3">
            <div class="searchcontainer">
                <select id="searchType" name="searchType">
                    <option value="1">Search Filter1</option>
                    <option value="1">Search Filter2</option>
                </select>
                <input type="text" id="searchInput" placeholder="Search...">
                <button><i class="fa-solid fa-magnifying-glass"></i></button>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Profile</th>
                                        <th>Username</th>
                                        <th>Email</th>
                                        <th>Roles</th>
                                        <th>Status</th>
                                        <th>Role Actions</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in usersDto)
                                    {
                                        <tr>
                                            <td>
                                                @if (string.IsNullOrEmpty(user!.User!.AvatarPath))
                                                {
                                                    <img src="../images/user.png" alt="User Avatar" class="rounded-circle"
                                                        width="50" height="50" />
                                                }
                                                else
                                                {
                                                    <img src="@user!.User!.AvatarPath" alt="User Avatar" class="rounded-circle"
                                                        width="50" height="50" />
                                                }
                                            </td>
                                            <td>@user!.User!.UserName</td>
                                            <td>@user!.User!.Email</td>
                                            <td>@string.Join(", ", user!.Roles)</td>
                                            <td>
                                                <label
                                                    class="badge @(user!.User!.IsBanned ? "badge-danger" : user!.User!.IsMuted ? "badge-warning" : "badge-success")">
                                                    @(user!.User!.IsBanned ? "Banned" : user!.User!.IsMuted ? "Muted" :
                                                        "Active")
                                                </label>
                                            </td>
                                            <td>
                                                @if (user!.Roles.Contains("Admin"))
                                                {
                                                    <button @onclick="() => RemoveRole(user!.User!.Id)"
                                                        class="btn btn-github btn-sm">
                                                        Remove Admin
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button @onclick="() => AssignRole(user!.User!.Id)" class="btn btn-info btn-sm">
                                                        Assign Admin
                                                    </button>
                                                }
                                            </td>
                                            <td>
                                                <button @onclick="() => ToggleMute(user!.User!.Id)"
                                                    class="btn btn-warning btn-sm">
                                                    @(user!.User!.IsMuted ? "Unmute" : "Mute")
                                                </button>
                                                <button @onclick="() => ToggleBan(user!.User!.Id)"
                                                    class="btn btn-danger btn-sm">
                                                    @(user!.User!.IsBanned ? "Unban" : "Ban")
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="container">
                <button class="prevBtn" @onclick="GoToPreviousPage" disabled="@(!isLoading && currentPage == 1)">
                    <span class="prevBtn-icon">
                        <!-- SVG for previous button -->
                    </span>
                    <span class="prevBtn-text">Prev</span>
                </button>
                <div class="containerBtns">
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <button class="@(i == currentPage ? "activeBtn" : "")" @onclick="() => GoToPage(i)">@i</button>
                    }
                </div>
                <button class="nextBtn" @onclick="GoToNextPage" disabled="@(!isLoading && currentPage == totalPages)">
                    <span class="nextBtn-text">Next</span>
                    <span class="nextBtn-icon">
                        <!-- SVG for next button -->
                    </span>
                </button>
            </div>
            <div class="paginate-details">
                <span>-</span>
                <span class="count">@usersDto.Count</span> <span>-</span>
            </div>
        </div>
    </div>
}
<style>
    .container {
        padding: 8px 64px;
        display: flex;
        justify-content: space-between;
        background-color: #ffffff;
        border-radius: 64px;
    }

    .paginate-details {
        margin-top: 16px;
        font-weight: 500;
        text-align: center;
    }

    button {
        background-color: transparent;
        border: none;
    }

    .nextBtn {
        margin-left: 32px;
        margin-right: 32px;
    }

    .prevBtn,
    .nextBtn {
        cursor: pointer;
        display: flex;
        align-items: center;
        font-size: 16px;
        font-weight: 500;
        color: #2a3b52
    }

    .count {
        color: #7a7070;
    }

    .nextBtn-icon,
    .prevBtn-icon {
        display: flex;
    }

    .prevBtn svg {
        margin-right: 6px;
    }

    .nextBtn svg {
        margin-left: 6px;
    }

    .prevBtn svg,
    .nextBtn svg {
        color: #2a3b52
    }

    button[disabled].prevBtn,
    button[disabled].nextBtn {
        cursor: not-allowed;
        color: rgb(156 163 175 / var(--tw-text-opacity));
    }

    .containerBtns {
        width: 50%;
        display: flex;
        justify-content: space-around;
    }

    .leftContainer {
        display: flex;
        width: 190px;
        justify-content: end;
    }

    .rightContainer {
        display: flex;
        width: 190px;
        justify-content: start;
    }

    .activeBtn {
        margin: 0 12px;
        padding: 4px 6px;
        min-width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #5046e5;
        font-size: 20px;
        color: #fff;
        border-radius: 50%;
        border: 4px solid #c9c6ff
    }

    .numberBtn {
        cursor: pointer;
        margin: 0 4px;
        min-width: 40px;
        padding: 4px;
        font-size: 18px;
    }

    .numberBtn[disabled] {
        cursor: not-allowed
    }

     .searchcontainer {
        margin: auto;
        padding: 10px 20px;
        margin: auto;
        border: 1px solid rgb(255, 255, 255); 
        background: white; 
        border-radius: 64px;
        display: flex;
        justify-content: space-between;
    }


    .searchcontainer select {
        border: none;
        outline: none;
        width: 10%;
        cursor: pointer;
        background: transparent;
    }

    .searchcontainer input {
        width: 75%;
        border: none;
        outline: none;
        margin-left: 10px;
    }

    .searchcontainer button {
        border: none;
        outline: none;
        font-size: 25px;
        margin: auto;
        margin-right: 0;
        color: rgb(139, 139, 139);
        background: white;
    }
</style>