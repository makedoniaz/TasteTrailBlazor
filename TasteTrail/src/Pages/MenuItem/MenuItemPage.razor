@page "/MenuItem"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Menu Item</PageTitle>

@code {

    private List<MenuItem> Model = new List<MenuItem>{
new MenuItem {
Id = 1,
Name = "Text",
Description = "Text",
Price = 5,
PopularityRate = 5,
MenuId = 1,
Menu = null
},
new MenuItem {
Id = 2,
Name = "Text2",
Description = "Text2",
Price = 5,
PopularityRate = 5,
MenuId = 1,
Menu = null
}
};
    private MenuItem? SelectedMenu;
    private bool IsAdmin = true;
    private string searchQuery = string.Empty;

    @* protected async override Task OnInitializedAsync()
    {
        //await LoadMenus();
    } *@

    //private async Task LoadMenus()
    //{
    // Model = new();
    //}

    private void ShowUpdateForm(MenuItem menuItem)
    {
        SelectedMenu = menuItem;
        StateHasChanged();
    }

    private async Task UpdateMenu()
    {
        if (SelectedMenu != null)
        {
            try
            {
                var response = await Http.PutAsJsonAsync($"api/menus/{SelectedMenu.Id}", SelectedMenu);
                if (response.IsSuccessStatusCode)
                {
                    //await LoadMenus();
                    SelectedMenu = null;
                }
                else
                {
                    Console.WriteLine("Failed to update menuItem");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }
        }
    }

    private void DeleteMenu(int id)
    {
    }

    private void FilterMenus()
    {
    }

    private void HideUpdateForm()
    {
        //SelectedVenue = null;
    }
}
<div class="container h-100 mb-5 mt-2">

    <h1 style="font-size: 1.5rem; ">Search MenuItem</h1>

    <div class="column justify-content-center">
        <div class="row-12 row-md-8">
            <div class="input-group mb-3">
                <input type="text" @bind="searchQuery" @oninput="FilterMenus" class="form-control"
                    placeholder="Search for menus..." autocomplete="off" autofocus>
                <button class="btn btn-primary" @onclick="FilterMenus">
                    <span id="searchText">Search</span>
                </button>
            </div>
        </div>
    </div>

    @if (IsAdmin)
    {
        <a href="/MenuItem/Create" class="btn btn-add btn-primary mt-2 mb-3">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                <path
                    d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 144L48 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l144 0 0 144c0 17.7 14.3 32 32 32s32-14.3 32-32l0-144 144 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-144 0 0-144z" />
            </svg>
        </a>
    }

    @if (Model.Count == 0)
    {
        <div class="no-cards">
            <p>No menus available at the moment.</p>
        </div>
    }
    else
    {
        <div class="card-container mt-3 mt-md-5">
            @foreach (var menuItem in Model)
            {
                <a style="text-decoration:none; color: inherit;" href="MenuItem\@menuItem.Id">
                    <div class="card m-2">
                        <div class="card-head">
                            <button class="card-btn" @onclick="() => ShowUpdateForm(menuItem)">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 850 850">
                                    <path
                                        d="M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160L0 416c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-96c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 96c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l96 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L96 64z" />
                                </svg>
                            </button>
                            <button class="card-btn" @onclick="() => DeleteMenu(menuItem.Id)">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 850 850">
                                    <path
                                        d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z" />
                                </svg>
                            </button>
                            <img src="https://logo.png" alt="logo" class="card-logo">
                            <div class="product-detail">
                                <h2>@menuItem.Name</h2> @menuItem.Description
                            </div>
                            @* <span class="back-text"> FAS </span> *@
                        </div>
                        <div class="card-body">
                            <div class="product-desc">
                                <span class="product-title">
                                    @menuItem.Name
                                </span>
                                <span class="product-caption">
                                    @menuItem.Description
                                </span>
                                <span class="product-rating">
                                    @for (var i = 0; i < menuItem.PopularityRate; i++)
                                    {
                                        <i class="fa fa-star"></i>
                                    }
                                    @if (menuItem.PopularityRate < 5)
                                    {
                                        for (var j = menuItem.PopularityRate; j < 5; j++)
                                        {
                                            <i class="fa fa-star grey"></i>
                                        }
                                    }
                                    <span class="badge">
                                        @menuItem.PopularityRate
                                    </span>
                                </span>
                            </div>
                            @* <div class="product-properties"> <span class="product-size"> <h4>Size</h4> </span> </div> *@
                        </div>
                    </div>
                </a>
            }
        </div>
    }

    @if (SelectedMenu != null)
    {
        <div id="updateForm" class="update-form">
            <h3>Update MenuItem</h3>
            <input type="hidden" @bind="SelectedMenu.Id" />
            <div>
                <label for="newName">Name:</label>
                <input type="text" id="newName" @bind="SelectedMenu.Name" />
            </div>
            <div>
                <label for="newDescription">Description:</label>
                <input type="text" id="newDescription" @bind="SelectedMenu.Description" />
            </div>
            <br />
            <div class="card-actions">
                <button @onclick="() => UpdateMenu()">Save</button>
                <button @onclick="() => HideUpdateForm()">Cancel</button>
            </div>
        </div>
    }
</div>

<style>
    h1 {
        color: #333;
    }


    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    input[type="email"],
    select,
    textarea {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .no-cards {
        text-align: center;
        margin-top: 20px;
    }

    .no-cards p {
        font-size: 18px;
        color: #888;
    }

    .update-form {
        position: absolute;
        top: 45%;
        left: 50%;
        transform: translate(-40%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.418);
        z-index: 1000;
        width: 500px;
    }

    .update-form label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .update-form input[type="text"],
    .update-form input[type="date"],
    .update-form input[type="email"],
    .update-form select {
        width: calc(100% - 22px);
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 10px;
    }

    .update-form button {
        background-color: #5cb85c;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 10px;
    }

    .update-form button:hover {
        background-color: #4cae4c;
    }
</style>

<style> 

    .btn-add { 
        padding: 8px;
        border-radius: 40%;
        border: none;
        width: 40px;
        height: 40px;
        background-color: #17e961;
        transition: 2s;
    }

    .btn-add:hover { 
        background-color: #34c567;
    }

    .card-container {
        margin: 30px auto;
        display: flex;
        flex-wrap: wrap;
    }

    .card-container .card {
        width: 310px;
        height: 450px;
        border-radius: 25px;
        box-shadow: -1px 1px 13px rgba(0, 0, 0, 0.3);
    }

    .card {
        transition: 1s;
    }

    .card .card-head {
        position: relative;
        height: 252px;
        background: #fa782e;
        background: -moz-linear-gradient(-45deg, #fa782e 8%, #c82930 83%);
        background: -webkit-linear-gradient(-45deg, #fa782e 8%, #c82930 83%);
        background: linear-gradient(135deg, #fa782e 8%, #c82930 83%);
        border-radius: 25px 25px 0 0;
    }

    .card-head .card-logo {
        width: 55px;
        margin: 20px;
    }

    .card-head .card-btn {
        position: absolute;
        width: 40px;
        height: 40px;
        right: 1%;
        top: 5%;
        background-color: transparent;
        border: none;
        cursor: pointer;
        transition: 1s;
    }

    .card-btn:first-child {
        right: 13%;
    }

    .card-head .product-img {
        position: absolute;
        left: 0;
        margin-top: -16px;
        margin-left: 50px;
    }

    .card-head .product-detail {
        padding: 0 20px;
        font-size: 11px;
        color: #fff;
    }

    .card-head .product-detail h2 {
        font-size: 18px;
        font-weight: 500;
        letter-spacing: 2px;
        padding-bottom: 10px;
        text-transform: uppercase;
    }

    .card-head .back-text {
        display: inline-block;
        font-size: 125px;
        font-weight: 900;
        margin-left: -7px;
        margin-top: -12px;
        opacity: 0.1;
    }

    .card-body {
        height: 160px;
        background: #fff;
        border-radius: 0 0 25px 25px;
    }

    .card-body .product-desc .product-title {
        padding: 20px 20px 5px 20px;
        display: block;
        font-size: 17px;
        font-weight: 500;
        letter-spacing: 1px;
        text-transform: uppercase;
    }

    .card-body .product-desc .product-title b {
        font-weight: 900;
        letter-spacing: 0px;
    }

    .card-body .product-desc .badge {
        position: relative;
        font-size: 13px;
        font-weight: 300;
        color: #fff;
        background: #147235;
        padding: 2px 5px;
        border-radius: 4px;
        top: -2px;
        margin-left: 5px;
    }

    .card-body .product-desc .product-caption {
        display: block;
        padding: 0 20px;
        font-size: 10px;
        font-weight: 400;
        text-transform: uppercase;
    }

    .card-body .product-desc .product-rating {
        padding: 0 20px;
        font-size: 15px;
    }

    .card-body .product-desc .product-rating i.grey {
        color: #acacab;
    }


    .card:hover {
        transform: translate(-1%, -1%);
    }


    .card-btn:hover {
        opacity: 50%;
    }
</style>