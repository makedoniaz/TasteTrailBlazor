@* @page "/Venue/{Id:int?}"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager UriHelper
@inject HttpClient Http
@inject ILocalStorageService localStorageService
<PageTitle>Venue Details</PageTitle>

@code {
    public class VenueViewModel
    {
        public Venue? Venue { get; set; }
        public List<Menu>? Menus { get; set; } = new List<Menu>();
        //public List<Feedback>? Feedbacks { get; set; } = new List<Feedback>();
        public double Latitude { get; set; } = 40.3820624;
        public double Longitude { get; set; } = 49.877007;
    }

    [Parameter]
    public int Id { get; set; }

    private VenueViewModel Model = new VenueViewModel();

    private bool IsAdmin = true;
    private string path => Model.Venue?.LogoUrlPath == null ? "/images/not-available.jpg" : "../" + Model.Venue.LogoUrlPath;
    private void GoToDetails(int Id)
    {
        UriHelper.NavigateTo($"/Menu/{Id}");
    }

    protected async override Task OnInitializedAsync()
    {
        await LoadVenueData();
    }

    private async Task LoadVenueData()
    {
        try
        {

            var httpClient = HttpClientFactory.CreateClient("LocalHostPolicy");
            
            // Load Venue details
            var venueResponse = await httpClient.GetAsync($"/api/Venue/GetById?id={Id}");
            if (venueResponse.IsSuccessStatusCode)
            {
                Model.Venue = await venueResponse.Content.ReadFromJsonAsync<Venue>();
                Console.WriteLine($"Venue loaded: {Model.Venue?.Name}");
            }
            else
            {
                Console.WriteLine($"Error loading venue: {venueResponse.StatusCode} - {venueResponse.ReasonPhrase}");
            }

            // Load Menus
            var menusResponse = await httpClient.GetAsync($"/api/Menu/GetFromTo?from=1&to=20&venueId={Id}");
            if (menusResponse.IsSuccessStatusCode)
            {
                Model.Menus = await menusResponse.Content.ReadFromJsonAsync<List<Menu>>();
                Console.WriteLine($"Menus loaded: {Model.Menus?.Count} items");
            }
            else
            {
                Console.WriteLine($"Error loading menus: {menusResponse.StatusCode} - {menusResponse.ReasonPhrase}");
            }

            Console.WriteLine(Model.Venue.Name);

            // Load Feedbacks if needed
            // var feedbacksResponse = await httpClient.GetAsync($"/api/Feedbacks/GetByVenueId?venueId={Id}");
            // if (feedbacksResponse.IsSuccessStatusCode)
            // {
            // Model.Feedbacks = await feedbacksResponse.Content.ReadFromJsonAsync<List<Feedback>>();
            // }
            // else
            // {
            // Console.WriteLine($"Error: {feedbacksResponse.StatusCode} - {feedbacksResponse.ReasonPhrase}");
            // }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-4">
            <!-- Slideshow -->
            <div id="photoSlideshow" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="@path" class="d-block w-100" alt="Venue Photo">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <h1 class="mb-3">@Model?.Venue.Name</h1>
            <!-- Rating -->
            <div class="rating" data-rating="@Model?.Venue.OverallRating">
                <span class="text-warning">
                    @* @for (var i = 0; i < (Model?.Venue.OverallRating); i++)
                    {
                        <i class="fas fa-star star"></i>
                    }
                    @if (Model?.Venue.OverallRating < 5)
                    {
                        for (var j = (Model?.Venue.OverallRating); j < 5; j++)
                        {
                            <i class="far fa-star star"></i>
                        }
                    }  
                </span>
                <span class="badge bg-secondary ms-2">@Model.Venue.OverallRating</span>
            </div>
            <!-- Description -->
            <p class="mt-3"><strong>Description: </strong>@Model?.Venue.Description</p>
            <p class="mt-3"><strong>Email: </strong>@Model?.Venue.Email</p>
            <p class="mt-3"><strong>Address: </strong>@Model?.Venue.Address</p>
            <p class="mt-3"><strong>Contact Number: </strong>@Model?.Venue.ContactNumber</p>
            <p class="mt-3"><strong>Average Price: </strong>@Model?.Venue.AveragePrice</p>

            @if (IsAdmin)
            {
                <a href="CreateMenuPage/@Model?.Venue?.Id" class="btn btn-primary w-25 mt-5 mb-3">Create new Menu</a>
            }
        </div>
    </div>
    <hr class="mt-5">

    <div class="row mt-5">
        @foreach (var menu in Model?.Menus)
        {
            <div class="menu">
                <a style="text-decoration:none; color: inherit;" @onclick="() => GoToDetails(menu.Id)">
                    <div class="menu-head">
                        <h1>@menu.Name</h1>
                        <p class="established">@menu.Description</p>
                    </div>
                    <hr />
                    @foreach (var menuItems in menu.MenuItems)
                    {
                        <section>
                            <h2>Header</h2>
                            <article class="item">
                                <p class="flavor">@menuItems.Name</p>
                                <p class="price">150</p>
                            </article>
                        </section>
                    }
                </a>
            </div>
        }
    </div>

    <!-- Location Section -->
    <div class="mt-5">
        <h2>Location</h2>
        <div id="map" style="height: 300px;"></div>
        <p class="mt-3"><strong>Latitude: </strong><span id="lat">@Model.Latitude</span></p>
        <p class="mt-3"><strong>Longitude: </strong><span id="lng">@Model.Longitude</span></p>
    </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<script>
    var map = L.map('map').setView([@Model.Latitude, @Model.Longitude], 15);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var marker = L.marker([@Model.Latitude, @Model.Longitude], { draggable: true }).addTo(map);

    function updateCoordinates(lat, lng) {
        document.getElementById('lat').innerText = lat.toFixed(6);
        document.getElementById('lng').innerText = lng.toFixed(6);
    }

    map.on('click', function (e) {
        var lat = e.latlng.lat;
        var lng = e.latlng.lng;
        marker.setLatLng(e.latlng);
        updateCoordinates(lat, lng);
    });

    marker.on('dragend', function (e) {
        var lat = marker.getLatLng().lat;
        var lng = marker.getLatLng().lng;
        updateCoordinates(lat, lng);
    });
</script>

<style>
    .menu-head h1 {
        font-size: 34px;
        margin-top: 0;
        margin-bottom: 15px;
    }

    .menu h2 {
        font-size: 26px;
    }

    .menu .established {
        font-style: italic;
    }

    .menu h1,
    .menu h2,
    .menu p {
        text-align: center;
    }

    .menu {
        background-color: burlywood;
        margin-left: 1rem;
        margin-right: 1rem;
        padding: 20px 10px 30px 10px;
        max-width: 470px;
        border-radius: 2%;
    }

    .menu hr {
        height: 2px;
        background-color: brown;
        border-color: brown;
    }

    .menu h1,
    .menu h2 {
        font-family: Impact, serif;
    }

    .menu .item p {
        display: inline-block;
        margin-top: 5px;
        margin-bottom: 5px;
        font-size: 18px;
    }

    .menu .flavor,
    .menu .dessert {
        text-align: left;
        width: 75%;
    }

    .menu .price {
        text-align: right;
        width: 24%;
    }
</style> *@
