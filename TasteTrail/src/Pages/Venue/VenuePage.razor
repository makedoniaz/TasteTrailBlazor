@inject IJSRuntime JS
@inject ILocalStorageService localStorageService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IVenueService IVenueService
 
@page "/Venue" 
<PageTitle>Venue</PageTitle>

@code {

        private int from = 0;
    private int to = 10;
    private int currentPage = 1;
    private int totalPages = 10;
    private int itemsPerPage = 2;
    private List<VenueDto> venueDto = new List<VenueDto>(); 
    private VenueDto? SelectedVenue { get; set; } = null;
    private string searchQuery = string.Empty;
    private bool isLoading = true;

    protected async override Task OnInitializedAsync()
    { 
        await LoadVenues();
    }

    private async Task LoadVenues()
    {
        try
        {
            venueDto = await IVenueService.GetVenuesAsync(1, 20);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading venues: {ex.Message}");
        }
    }

    
    private void FilterVenues()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            // Show all venues
            LoadVenues();
        }
        else
        {
            // Filter based on search query
            venueDto = venueDto.Where(v => v.Name?.ToLower().Contains(searchQuery.ToLower()) == true).ToList();
        }
    } 
    private void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/Venue/{id}");
    } 

    private void GoToPage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages)
            return;

        currentPage = pageNumber;
        LoadVenues().GetAwaiter().GetResult();
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
            GoToPage(currentPage - 1);
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
            GoToPage(currentPage + 1);
    }

    private IEnumerable<int> GetPageNumbers()
    {
        int startPage = ((currentPage - 1) / 10) * 10 + 1;
        int endPage = Math.Min(startPage + 9, totalPages);

        for (int i = startPage; i <= endPage; i++)
        {
            yield return i;
        }
    }
}
<div class="container h-100 mb-5 mt-2">
    <h1 style="font-size: 1.5rem; ">Search Venue</h1>
    <div class="column justify-content-center">
        <div class="row-12 row-md-8">
            <div class="input-group mb-3">
                <input type="text" @bind="searchQuery" @oninput="FilterVenues" class="form-control"
                    placeholder="Search for venues..." autocomplete="off" autofocus>
                <button class="btn accordion-collapse" @onclick="FilterVenues">
                    Search
                </button>
            </div>
        </div>
    </div> 

    @if (!venueDto.Any())
    {
        <div class="no-cards">
            <p>No venues available at the moment.</p>
        </div>
    }
    else
    {
        <div class="card-container mt-3 mt-md-5">
            @foreach (var venue in venueDto)
            {
                <a style="text-decoration:none; color: inherit;" @onclick="() => GoToDetails(venue.Id)">
                    <div class="card m-2">
                        <div class="card-head"> 
                            <img src="@venue.LogoUrlPath" alt="logo" class="card-logo">
                            <div class="product-detail">
                                <h2>@venue.Name</h2> @venue.Description
                            </div>
                            @* <span class="back-text"> FAS </span> *@
                        </div>
                        <div class="card-body">
                            <div class="product-desc">
                                <span class="product-title">
                                    @venue.Name
                                </span>
                                <span class="product-caption">
                                    @venue.Description
                                </span>
                                <span class="product-rating">
                                    @for (var i = 0; i < venue.OverallRating; i++)
                                    {
                                        <i class="fa fa-star"></i>
                                    }
                                    @if (venue.OverallRating < 5)
                                    {
                                        for (var j = venue.OverallRating; j < 5; j++)
                                        {
                                            <i class="fa fa-star grey"></i>
                                        }
                                    }
                                    <span class="badge">
                                        @venue.OverallRating
                                    </span>
                                </span>
                            </div> 
                        </div>
                    </div>
                </a>
            }
        </div>
        <div class="row">
            <div class="pagecontainer">
                <button class="prevBtn"  disabled="@(!isLoading && currentPage == 1)">
                    <span class="prevBtn-icon">
                        <!-- SVG for previous button -->
                    </span>
                    <span class="prevBtn-text">Prev</span>
                </button>
                <div class="containerBtns">
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <button class="@(i == currentPage ? "activeBtn" : "")" @onclick="() => GoToPage(i)">@i</button>
                    }
                </div>
                <button class="nextBtn" @onclick="GoToNextPage" disabled="@(!isLoading && currentPage == totalPages)">
                    <span class="nextBtn-text">Next</span>
                    <span class="nextBtn-icon">
                        <!-- SVG for next button -->
                    </span>
                </button>
            </div>
            <div class="paginate-details">
                <span>-</span>
                <span class="count">@venueDto.Count</span> <span>-</span>
            </div>
        </div>
    }
    @* @if (SelectedVenue != null && IsAdmin)
    {
        <div class="update-form">
            <h3>Update Venue</h3>
            <div>
                <label for="newName">Name:</label>
                <input type="text" @bind="SelectedVenue.Name">
            </div>
            <div>
                <label for="newEmail">Email:</label>
                <input type="text" @bind="SelectedVenue.Email">
            </div>
            <div>
                <label for="newAddress">Address:</label>
                <input type="text" @bind="SelectedVenue.Address">
            </div>
            <div>
                <label for="newContactNumber">Contact Number:</label>
                <input type="text" @bind="SelectedVenue.ContactNumber">
            </div>
            <div>
                <label for="newAveragePrice">Average Price:</label>
                <input type="number" @bind="SelectedVenue.AveragePrice">
            </div>
            <div>
                <label for="newDescription">Description:</label>
                <input type="text" @bind="SelectedVenue.Description">
            </div>
            <br>
            <div class="venue-actions">
                <button @onclick="() => UpdateVenue()">Save</button>
                <button @onclick="() => HideUpdateForm()">Cancel</button>
            </div>
        </div>
    } *@
</div>

<style>
    h1 {
        color: #333;
    }


    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    input[type="email"],
    select,
    textarea {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .no-cards {
        text-align: center;
        margin-top: 20px;
    }

    .no-cards p {
        font-size: 18px;
        color: #888;
    }

    .update-form {
        position: absolute;
        top: 45%;
        left: 50%;
        transform: translate(-40%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.418);
        z-index: 1000;
        width: 500px;
    }

    .update-form label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .update-form input[type="text"],
    .update-form input[type="date"],
    .update-form input[type="email"],
    .update-form select {
        width: calc(100% - 22px);
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 10px;
    }

    .update-form button {
        background-color: #5cb85c;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 10px;
    }

    .update-form button:hover {
        background-color: #4cae4c;
    }
</style>

<style> 

    .card-container {
        margin: 30px auto ;
        margin-bottom: 250px;
        display: flex;
        flex-wrap: wrap;
    }

    .card-container .card {
        width: 310px;
        height: 450px;
        border-radius: 25px;
        box-shadow: -1px 1px 13px rgba(0, 0, 0, 0.3);
    }

    .card {
        transition: 1s;
    }

    .card .card-head {
        position: relative;
        height: 252px;
        background: #fa782e;
        background: -moz-linear-gradient(-45deg, #fa782e 8%, #c82930 83%);
        background: -webkit-linear-gradient(-45deg, #fa782e 8%, #c82930 83%);
        background: linear-gradient(135deg, #fa782e 8%, #c82930 83%);
        border-radius: 25px 25px 0 0;
    }

    .card-head .card-logo {
        width: 55px;
        margin: 20px;
    }

    .card-head .card-btn {
        position: absolute;
        width: 40px;
        height: 40px;
        right: 1%;
        top: 5%;
        background-color: transparent;
        border: none;
        cursor: pointer;
        transition: 1s;
    }

    .card-btn:first-child {
        right: 13%;
    }

    .card-head .product-img {
        position: absolute;
        left: 0;
        margin-top: -16px;
        margin-left: 50px;
    }

    .card-head .product-detail {
        padding: 0 20px;
        font-size: 11px;
        color: #fff;
    }

    .card-head .product-detail h2 {
        font-size: 18px;
        font-weight: 500;
        letter-spacing: 2px;
        padding-bottom: 10px;
        text-transform: uppercase;
    }

    .card-head .back-text {
        display: inline-block;
        font-size: 125px;
        font-weight: 900;
        margin-left: -7px;
        margin-top: -12px;
        opacity: 0.1;
    }

    .card-body {
        height: 160px;
        background: #fff;
        border-radius: 0 0 25px 25px;
    }

    .card-body .product-desc .product-title {
        padding: 20px 20px 5px 20px;
        display: block;
        font-size: 17px;
        font-weight: 500;
        letter-spacing: 1px;
        text-transform: uppercase;
    }

    .card-body .product-desc .product-title b {
        font-weight: 900;
        letter-spacing: 0px;
    }

    .card-body .product-desc .badge {
        position: relative;
        font-size: 13px;
        font-weight: 300;
        color: #fff;
        background: #147235;
        padding: 2px 5px;
        border-radius: 4px;
        top: -2px;
        margin-left: 5px;
    }

    .card-body .product-desc .product-caption {
        display: block;
        padding: 0 20px;
        font-size: 10px;
        font-weight: 400;
        text-transform: uppercase;
    }

    .card-body .product-desc .product-rating {
        padding: 0 20px;
        font-size: 15px;
    }

    .card-body .product-desc .product-rating i.grey {
        color: #acacab;
    }


    .card:hover {
        transform: translate(-1%, -1%);
    }


    .card-btn:hover {
        opacity: 50%;
    }

    .btn
    {
        background: #f7fa2e;
        background: -moz-linear-gradient(-45deg, #fae62e 8%, #c82929 83%);
        background: -webkit-linear-gradient(-45deg, #fae62e 8%, #c82929 83%);
        background: linear-gradient(135deg, #fae62e 8%, #c82929 83%);
        border: none !important; 
        font-weight: 500 !important;
        color: #ffffff !important;
    }
</style>

<style>
    .pagecontainer {
        padding: 8px 64px;
        display: flex;
        justify-content: space-between;
        background-color: #ffffff;
        border-radius: 64px;
    }

    .paginate-details {
        margin-top: 16px;
        font-weight: 500;
        text-align: center;
    }

    button {
        background-color: transparent;
        border: none;
    }

    .nextBtn {
        margin-left: 32px;
        margin-right: 32px;
    }

    .prevBtn,
    .nextBtn {
        cursor: pointer;
        display: flex;
        align-items: center;
        font-size: 16px;
        font-weight: 500;
        color: #2a3b52
    }

    .count {
        color: #7a7070;
    }

    .nextBtn-icon,
    .prevBtn-icon {
        display: flex;
    }

    .prevBtn svg {
        margin-right: 6px;
    }

    .nextBtn svg {
        margin-left: 6px;
    }

    .prevBtn svg,
    .nextBtn svg {
        color: #2a3b52
    }

    button[disabled].prevBtn,
    button[disabled].nextBtn {
        cursor: not-allowed;
        color: rgb(156 163 175 / var(--tw-text-opacity));
    }

    .containerBtns {
        width: 50%;
        display: flex;
        justify-content: space-around;
    }

    .leftContainer {
        display: flex;
        width: 190px;
        justify-content: end;
    }

    .rightContainer {
        display: flex;
        width: 190px;
        justify-content: start;
    }

    .activeBtn { 
        padding: 4px 6px;
        min-width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #5046e5;
        font-size: 20px;
        color: #fff;
        border-radius: 50%;
        border: 4px solid #c9c6ff
    }

    .numberBtn {
        cursor: pointer;
        margin: 0 4px;
        min-width: 40px;
        padding: 4px;
        font-size: 18px;
    }

    .numberBtn[disabled] {
        cursor: not-allowed
    }

</style>