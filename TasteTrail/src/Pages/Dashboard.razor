@page "/Dashboard"
@attribute [Authorize]
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService localStorageService 
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Dashboard</PageTitle>

@code {
    
    public class AdminDashboardViewModel
    {
        public int TotalUsers { get; set; }
        public int TotalFeedbacks { get; set; }
        public int TotalVenues { get; set; }
    }

    private AdminDashboardViewModel Model = new AdminDashboardViewModel();
    private string httpResponseErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        } 
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            var token = await localStorageService.GetItemAsStringAsync("jwt");
            var httpClient = HttpClientFactory.CreateClient("BlazorPolicy");

            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await httpClient.GetAsync("/api/AdminPanel/DashboardInfo");

            if (response.IsSuccessStatusCode)
            {
                Model = await response.Content.ReadFromJsonAsync<AdminDashboardViewModel>();
                StateHasChanged();  
                await RenderCharts();  
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    private async Task RenderCharts()
    {
        if (Model.TotalUsers > 0)
        {
            await JS.InvokeVoidAsync("renderUserChart", Model.TotalUsers);
        }

        if (Model.TotalFeedbacks > 0)
        {
            await JS.InvokeVoidAsync("renderFeedbackChart", Model.TotalFeedbacks);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
         }
    }
}
<div class="container mt-5">
    <h1>Admin Dashboard</h1>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h5 class="card-title">Total Users</h5>
                    <p class="card-text">@Model.TotalUsers</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <h5 class="card-title">Total Feedbacks</h5>
                    <p class="card-text">@Model.TotalFeedbacks</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <h5 class="card-title">Total Venues</h5>
                    <p class="card-text">@Model.TotalVenues</p>
                </div>
            </div>
        </div>
    </div>

    <h2 class="mt-4">Statistics Graphs</h2>
    <div class="row">
        <div class="col-md-6">
            <canvas id="userChart"></canvas>
        </div>
        <div class="col-md-6">
            <canvas id="feedbackChart"></canvas>
        </div>
    </div>
</div>
<br>
<br>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    window.renderUserChart = function (totalUsers) {
        var ctx1 = document.getElementById('userChart').getContext('2d');
        new Chart(ctx1, {
            type: 'bar',
            data: {
                labels: ['Total Users'],
                datasets: [{
                    label: 'Users',
                    data: [totalUsers],
                    backgroundColor: ['rgba(54, 162, 235, 0.2)'],
                    borderColor: ['rgba(54, 162, 235, 1)'],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    };

    window.renderFeedbackChart = function (totalFeedbacks) {
        var ctx2 = document.getElementById('feedbackChart').getContext('2d');
        new Chart(ctx2, {
            type: 'pie',
            data: {
                labels: ['Feedbacks'],
                datasets: [{
                    label: 'Feedbacks',
                    data: [totalFeedbacks],
                    backgroundColor: ['rgba(255, 159, 64, 0.2)'],
                    borderColor: ['rgba(255, 159, 64, 1)'],
                    borderWidth: 1
                }]
            }
        });
    };
</script>
